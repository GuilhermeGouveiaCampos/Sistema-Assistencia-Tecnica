const express = require('express');
const router = express.Router();
const db = require('../db');

// üîç Listar t√©cnicos ativos
router.get('/', async (req, res) => {
  try {
    const [rows] = await db.query(`
      SELECT t.id_tecnico, t.nome, t.especializacao, t.telefone, t.status, u.id_usuario
      FROM tecnico t
      JOIN usuario u ON t.id_usuario = u.id_usuario
      WHERE t.status = 'ativo'
    `);
    res.json(rows);
  } catch (err) {
    console.error('‚ùå Erro ao listar t√©cnicos:', err);
    res.status(500).json({ erro: 'Erro ao listar t√©cnicos.' });
  }
});

// üîç Listar t√©cnicos inativos
router.get('/inativos', async (req, res) => {
  try {
    const [rows] = await db.query(`
      SELECT t.id_tecnico, t.nome, t.especializacao, t.telefone, t.status, u.id_usuario
      FROM tecnico t
      JOIN usuario u ON t.id_usuario = u.id_usuario
      WHERE t.status = 'inativo'
    `);
    res.json(rows);
  } catch (err) {
    console.error('‚ùå Erro ao listar t√©cnicos inativos:', err);
    res.status(500).json({ erro: 'Erro ao listar t√©cnicos inativos.' });
  }
});

// ‚ûï Cadastrar t√©cnico
router.post('/', async (req, res) => {
  const { nome, especializacao, telefone, id_usuario } = req.body;

  if (!nome || !especializacao || !telefone || !id_usuario) {
    return res.status(400).json({ erro: 'Todos os campos s√£o obrigat√≥rios.' });
  }

  try {
    const [result] = await db.query(
      `INSERT INTO tecnico (nome, especializacao, telefone, status, id_usuario) 
       VALUES (?, ?, ?, 'ativo', ?)`,
      [nome, especializacao, telefone, id_usuario]
    );

    res.status(201).json({ mensagem: 'T√©cnico cadastrado com sucesso.', id_tecnico: result.insertId });
  } catch (err) {
    console.error('‚ùå Erro ao cadastrar t√©cnico:', err);
    res.status(500).json({ erro: 'Erro ao cadastrar t√©cnico.' });
  }
});

// üìù Atualizar t√©cnico
router.put('/:id', async (req, res) => {
  const { id } = req.params;
  const { nome, especializacao, telefone } = req.body;

  if (!nome || !especializacao || !telefone) {
    return res.status(400).json({ erro: 'Todos os campos s√£o obrigat√≥rios.' });
  }

  try {
    const [result] = await db.query(
      `UPDATE tecnico SET nome = ?, especializacao = ?, telefone = ? WHERE id_tecnico = ?`,
      [nome, especializacao, telefone, id]
    );

    if (result.affectedRows === 0) {
      return res.status(404).json({ erro: 'T√©cnico n√£o encontrado.' });
    }

    res.json({ mensagem: 'T√©cnico atualizado com sucesso.' });
  } catch (err) {
    console.error('‚ùå Erro ao atualizar t√©cnico:', err);
    res.status(500).json({ erro: 'Erro ao atualizar t√©cnico.' });
  }
});

// ‚ùå Inativar t√©cnico (exclus√£o l√≥gica)
router.delete('/:id', async (req, res) => {
  const { id } = req.params;

  try {
    const [result] = await db.query(
      `UPDATE tecnico SET status = 'inativo' WHERE id_tecnico = ?`,
      [id]
    );

    if (result.affectedRows === 0) {
      return res.status(404).json({ erro: 'T√©cnico n√£o encontrado.' });
    }

    res.json({ mensagem: 'T√©cnico marcado como inativo.' });
  } catch (err) {
    console.error('‚ùå Erro ao inativar t√©cnico:', err);
    res.status(500).json({ erro: 'Erro ao inativar t√©cnico.' });
  }
});

// ‚úÖ Ativar t√©cnico
router.put('/ativar/:id', async (req, res) => {
  const { id } = req.params;

  try {
    const [result] = await db.query(
      'UPDATE tecnico SET status = "ativo" WHERE id_tecnico = ?',
      [id]
    );

    if (result.affectedRows === 0) {
      return res.status(404).json({ erro: 'T√©cnico n√£o encontrado.' });
    }

    res.status(200).json({ mensagem: 'T√©cnico ativado com sucesso.' });
  } catch (err) {
    console.error('‚ùå Erro ao ativar t√©cnico:', err);
    res.status(500).json({ erro: 'Erro ao ativar t√©cnico.' });
  }
});


module.exports = router;
